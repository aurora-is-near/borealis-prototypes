syntax = "proto3";

package borealis.payloads.near;

import "payloads/near/common/common.proto";
import "payloads/near/block/transaction/errors/receipt_validation.proto";
import "payloads/near/block/transaction/errors/function_call.proto";

message InvalidAccessKeyError {
  message AccessKeyNotFound {
    string account_id = 1;
    PublicKey public_key = 2;
  }
  message ReceiverMismatch {
    string tx_receiver = 1;
    string ak_receiver = 2;
  }
  message MethodNameMismatch {
    string method_name = 1;
  }
  message RequiresFullAccess {}
  message NotEnoughAllowance {
    string account_id = 1;
    PublicKey public_key = 2;
    bytes u128_allowance = 3;
    bytes u128_cost = 4;
  }
  message DepositWithFunctionCall {}
  oneof variant {
    AccessKeyNotFound access_key_not_found = 1;
    ReceiverMismatch receiver_mismatch = 2;
    MethodNameMismatch method_name_mismatch = 3;
    RequiresFullAccess requires_full_access = 4;
    NotEnoughAllowance not_enough_allowance = 5;
    DepositWithFunctionCall deposit_with_function_call = 6;
  }
}

message TxExecutionError {
  message ActionError {
    message ActionErrorKind {
      // Happens when CreateAccount action tries to create an account with account_id which is already exists in the storage
      message AccountAlreadyExists {
        string account_id = 1;
      }
      // Happens when TX receiver_id doesn't exist (but action is not Action::CreateAccount)
      message AccountDoesNotExist {
        string account_id = 1;
      }
      // A top-level account ID can only be created by registrar.
      message CreateAccountOnlyByRegistrar {
        string account_id = 1;
        string registrar_account_id = 2;
        string predecessor_id = 3;
      }
      // A newly created account must be under a namespace of the creator account
      message CreateAccountNotAllowed {
        string account_id = 1;
        string predecessor_id = 2;
      }
      // Administrative actions like `DeployContract`, `Stake`, `AddKey`, `DeleteKey`. can be proceed only if sender=receiver
      // or the first TX action is a `CreateAccount` action
      message ActorNoPermission {
        string account_id = 1;
        string actor_id = 2;
      }
      // Account tries to remove an access key that doesn't exist
      message DeleteKeyDoesNotExist {
        string account_id = 1;
        PublicKey public_key = 2;
      }
      // The public key is already used for an existing access key
      message AddKeyAlreadyExists {
        string account_id = 1;
        PublicKey public_key = 2;
      }
      // Account is staking and can not be deleted
      message DeleteAccountStaking {
        string account_id = 1;
      }
      // ActionReceipt can't be completed, because the remaining balance will not be enough to cover storage.
      message LackBalanceForState {
        // An account which needs balance
        string account_id = 1;
        // Balance required to complete an action.
        bytes u128_amount = 2;
      }
      // Account is not yet staked, but tries to unstake
      message TriesToUnstake {
        string account_id = 1;
      }
      // The account doesn't have enough balance to increase the stake.
      message TriesToStake {
        string account_id = 1;
        bytes u128_stake = 2;
        bytes u128_locked = 3;
        bytes u128_balance = 4;
      }
      message InsufficientStake {
        string account_id = 1;
        bytes u128_stake = 2;
        bytes u128_minimum_stake = 3;
      }
      // An error occurred during a `FunctionCall` Action, parameter is debug message.
      message FunctionCallError {
        FunctionCallErrorSer error = 1;
      }
      // Error occurs when a new `ActionReceipt` created by the `FunctionCall` action fails
      // receipt validation.
      message NewReceiptValidationError {
        ReceiptValidationError error = 1;
      }
      // Error occurs when a `CreateAccount` action is called on hex-characters
      // account of length 64.  See implicit account creation NEP:
      // <https://github.com/nearprotocol/NEPs/pull/71>.
      message OnlyImplicitAccountCreationAllowed {
        string account_id = 1;
      }
      // Delete account whose state is large is temporarily banned.
      message DeleteAccountWithLargeState {
        string account_id = 1;
      }
      // Signature does not match the provided actions and given signer public key.
      message DelegateActionInvalidSignature {}
      // Receiver of the transaction doesn't match Sender of the delegate action
      message DelegateActionSenderDoesNotMatchTxReceiver {
        string sender_id = 1;
        string receiver_id = 2;
      }
      // Delegate action has expired. `max_block_height` is less than actual block height.
      message DelegateActionExpired {}
      // The given public key doesn't exist for Sender account
      message DelegateActionAccessKeyError {
        InvalidAccessKeyError error = 1;
      }
      // DelegateAction nonce must be greater sender[public_key].nonce
      message DelegateActionInvalidNonce {
        uint64 delegate_nonce = 1;
        uint64 ak_nonce = 2;
      }
      // DelegateAction nonce is larger than the upper bound given by the block height
      message DelegateActionNonceTooLarge {
        uint64 delegate_nonce = 1;
        uint64 upper_bound = 2;
      }
      // Non-refundable storage transfer to an existing account is not allowed according to NEP-491.
      message NonRefundableTransferToExistingAccount {
        string account_id = 1;
      }
      oneof variant {
        AccountAlreadyExists account_already_exists = 1;
        AccountDoesNotExist account_does_not_exist = 2;
        CreateAccountOnlyByRegistrar create_account_only_by_registrar = 3;
        CreateAccountNotAllowed create_account_not_allowed = 4;
        ActorNoPermission actor_no_permission = 5;
        DeleteKeyDoesNotExist delete_key_does_not_exist = 6;
        AddKeyAlreadyExists add_key_already_exists = 7;
        DeleteAccountStaking delete_account_staking = 8;
        LackBalanceForState lack_balance_for_state = 9;
        TriesToUnstake tries_to_unstake = 10;
        TriesToStake tries_to_stake = 11;
        InsufficientStake insufficient_stake = 12;
        FunctionCallError function_call_error = 13;
        NewReceiptValidationError new_receipt_validation_error = 14;
        OnlyImplicitAccountCreationAllowed only_implicit_account_creation_allowed = 15;
        DeleteAccountWithLargeState delete_account_with_large_state = 16;
        DelegateActionInvalidSignature delegate_action_invalid_signature = 17;
        DelegateActionSenderDoesNotMatchTxReceiver delegate_action_sender_does_not_match_tx_receiver = 18;
        DelegateActionExpired delegate_action_expired = 19;
        DelegateActionAccessKeyError delegate_action_access_key_error = 20;
        DelegateActionInvalidNonce delegate_action_invalid_nonce = 21;
        DelegateActionNonceTooLarge delegate_action_nonce_too_large = 22;
        NonRefundableTransferToExistingAccount non_refundable_transfer_to_existing_account = 23;
      }
    }
    optional uint64 index = 1;
    ActionErrorKind kind = 2;
  }
  message InvalidTxError {
    message InvalidSignerId {
      string signer_id = 1;
    }
    message SignerDoesNotExist {
      string signer_id = 1;
    }
    message InvalidNonce {
      uint64 tx_nonce = 1;
      uint64 ak_nonce = 2;
    }
    message NonceTooLarge {
      uint64 tx_nonce = 1;
      uint64 upper_bound = 2;
    }
    message InvalidReceiverId {
      string receiver_id = 1;
    }
    message InvalidSignature {}
    message NotEnoughBalance {
      string signer_id = 1;
      bytes u128_balance = 2;
      bytes u128_cost = 3;
    }
    message LackBalanceForState {
      string signer_id = 1;
      bytes u128_amount = 2;
    }
    message CostOverflow {}
    message InvalidChain {}
    message Expired {}
    message ActionsValidation {
      message DeleteActionMustBeFinal {}
      message TotalPrepaidGasExceeded {
        uint64 total_prepaid_gas = 1;
        uint64 limit = 2;
      }
      message TotalNumberOfActionsExceeded {
        uint64 total_number_of_actions = 1;
        uint64 limit = 2;
      }
      message AddKeyMethodNamesNumberOfBytesExceeded {
        uint64 total_number_of_bytes = 1;
        uint64 limit = 2;
      }
      message AddKeyMethodNameLengthExceeded {
        uint64 length = 1;
        uint64 limit = 2;
      }
      message IntegerOverflow {}
      message InvalidAccountId {
        string account_id = 1;
      }
      message ContractSizeExceeded {
        uint64 size = 1;
        uint64 limit = 2;
      }
      message FunctionCallMethodNameLengthExceeded {
        uint64 length = 1;
        uint64 limit = 2;
      }
      message FunctionCallArgumentsLengthExceeded {
        uint64 length = 1;
        uint64 limit = 2;
      }
      message UnsuitableStakingKey {
        PublicKey public_key = 1;
      }
      message FunctionCallZeroAttachedGas {}
      message DelegateActionMustBeOnlyOne {}
      message UnsupportedProtocolFeature {
        string protocol_feature = 1;
        uint32 version = 2;
      }
      oneof variant {
        DeleteActionMustBeFinal delete_action_must_be_final = 1;
        TotalPrepaidGasExceeded total_prepaid_gas_exceeded = 2;
        TotalNumberOfActionsExceeded total_number_of_actions_exceeded = 3;
        AddKeyMethodNamesNumberOfBytesExceeded add_key_method_names_number_of_bytes_exceeded = 4;
        AddKeyMethodNameLengthExceeded add_key_method_name_length_exceeded = 5;
        IntegerOverflow integer_overflow = 6;
        InvalidAccountId invalid_account_id = 7;
        ContractSizeExceeded contract_size_exceeded = 8;
        FunctionCallMethodNameLengthExceeded function_call_method_name_length_exceeded = 9;
        FunctionCallArgumentsLengthExceeded function_call_arguments_length_exceeded = 10;
        UnsuitableStakingKey unsuitable_staking_key = 11;
        FunctionCallZeroAttachedGas function_call_zero_attached_gas = 12;
        DelegateActionMustBeOnlyOne delegate_action_must_be_only_one = 13;
        UnsupportedProtocolFeature unsupported_protocol_feature = 14;
      }
    }
    message TransactionSizeExceeded {
      uint64 size = 1;
      uint64 limit = 2;
    }
    oneof variant {
      InvalidAccessKeyError invalid_access_key_error = 1;
      InvalidSignerId invalid_signer_id = 2;
      SignerDoesNotExist signer_does_not_exist = 3;
      InvalidNonce invalid_nonce = 4;
      NonceTooLarge nonce_too_large = 5;
      InvalidReceiverId invalid_receiver_id = 6;
      InvalidSignature invalid_signature = 7;
      NotEnoughBalance not_enough_balance = 8;
      LackBalanceForState lack_balance_for_state = 9;
      CostOverflow cost_overflow = 10;
      InvalidChain invalid_chain = 11;
      Expired expired = 12;
      ActionsValidation actions_validation = 13;
      TransactionSizeExceeded transaction_size_exceeded = 14;
    }
  }
  oneof variant {
    ActionError action_error = 1;
    InvalidTxError invalid_tx_error = 2;
  }
}
