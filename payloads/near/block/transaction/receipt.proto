syntax = "proto3";

package borealis.payloads.near;

import "payloads/near/common/common.proto";
import "payloads/near/block/transaction/access_key.proto";

message ReceiptView {
  string predecessor_id = 1;
  string receiver_id = 2;
  bytes h256_receipt_id = 3;
  ReceiptEnumView receipt = 4;
  uint64 priority = 5;
}

message ReceiptEnumView {
  message Action {
    string signer_id = 1;
    PublicKey signer_public_key = 2;
    bytes u128_gas_price = 3;
    repeated DataReceiverView output_data_receivers = 4;
    repeated bytes h256_input_data_ids = 5;
    repeated ActionView actions = 6;
    bool is_promise_yield = 7;
  }
  message Data {
    bytes h256_data_id = 1;
    optional bytes data = 2;
    bool is_promise_resume = 3;
  }
  oneof variant {
    Action action = 1;
    Data data = 2;
  }
}

message DataReceiverView {
  bytes h256_data_id = 1;
  string receiver_id = 2;
}

message ActionView {
  message CreateAccount {}
  message DeployContract {
    bytes code = 1;
  }
  message FunctionCall {
    string method_name = 1;
    bytes args = 2;
    uint64 gas = 3;
    bytes u128_deposit = 4;
  }
  message Transfer {
    bytes u128_deposit = 1;
  }
  message Stake {
    bytes u128_stake = 1;
    PublicKey public_key = 2;
  }
  message AddKey {
    PublicKey public_key = 1;
    AccessKeyView access_key = 2;
  }
  message DeleteKey {
    PublicKey public_key = 1;
  }
  message DeleteAccount {
    string beneficiary_id = 1;
  }
  message Delegate {
    // This action allows to execute the inner actions behalf of the defined sender.
    message DelegateAction {
      message NonDelegateAction {
        ActionView action = 1;
      }
      // Signer of the delegated actions
      string sender_id = 1;
      // Receiver of the delegated actions.
      string receiver_id = 2;
      // List of actions to be executed.
      //
      // With the meta transactions MVP defined in NEP-366, nested
      // DelegateActions are not allowed. A separate type is used to enforce it.
      repeated NonDelegateAction actions = 3;
      /// Nonce to ensure that the same delegate action is not sent twice by a
      /// relayer and should match for given account's `public_key`.
      /// After this action is processed it will increment.
      uint64 nonce = 4;
      /// The maximal height of the block in the blockchain below which the given DelegateAction is valid.
      uint64 max_block_height = 5;
      /// Public key used to sign this delegated action.
      PublicKey public_key = 6;
    }
    DelegateAction delegate_action = 1;
    Signature signature = 2;
  }
  message NonrefundableStorageTransfer {
    bytes u128_deposit = 1;
  }
  message DeployGlobalContract {
    bytes code = 1;
  }
  message DeployGlobalContractByAccountId {
    bytes code = 1;
  }
  message UseGlobalContract {
    bytes code_hash = 1;
  }
  message UseGlobalContractByAccountId {
    string account_id = 1;
  }
  oneof variant {
    CreateAccount create_account = 1;
    DeployContract deploy_contract = 2;
    FunctionCall function_call = 3;
    Transfer transfer = 4;
    Stake stake = 5;
    AddKey add_key = 6;
    DeleteKey delete_key = 7;
    DeleteAccount delete_account = 8;
    Delegate delegate = 9;
    NonrefundableStorageTransfer nonrefundable_storage_transfer = 10;
    DeployGlobalContract deploy_global_contract = 11;
    DeployGlobalContractByAccountId deploy_global_contract_by_account_id = 12;
    UseGlobalContract use_global_contract = 13;
    UseGlobalContractByAccountId use_global_contract_by_account_id = 14;
  }
}
