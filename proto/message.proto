syntax = "proto3";

message Message {
  uint32 version = 1;
  Envelope envelope = 2;
  oneof payload {
    bytes generic = 3;
    RpcRequest rpc_request = 4;
    RpcResponse rpc_response = 5;
    GetAccountStatusRequest get_account_status_request = 6;
    GetAccountStatusResponse get_account_status_response = 7;
    BlockView near_block_header = 8;
    Shard near_block_shard = 9;
  }
}

message Envelope {
  uint32 event_type = 1;
  uint64 sequential_id = 2;
  uint32 timestamp_s = 3;
  uint32 timestamp_ms = 4;
  bytes unique_id = 5;
}

message BlockView {
  string author = 1;
  IndexerBlockHeaderView header = 2;
}

message IndexerBlockHeaderView {
  uint64 height = 1;
  optional uint64 prev_height = 2;
  bytes epoch_id = 3;
  bytes next_epoch_id = 4;
  bytes hash = 5;
  bytes prev_hash = 6;
  bytes prev_state_root = 7;
  bytes chunk_receipts_root = 8;
  bytes chunk_headers_root = 9;
  bytes chunk_tx_root = 10;
  bytes outcome_root = 11;
  uint64 chunks_included = 12;
  bytes challenges_root = 13;
  uint64 timestamp = 14;
  uint64 timestamp_nanosec = 15;
  bytes random_value = 16;
  repeated ValidatorStakeView validator_proposals = 17;
  repeated bool chunk_mask = 18;
  bytes gas_price = 19;
  optional uint64 block_ordinal = 20;
  bytes total_supply = 21;
  repeated SlashedValidator challenges_result = 22;
  bytes last_final_block = 23;
  bytes last_ds_final_block = 24;
  bytes next_bp_hash = 25;
  bytes block_merkle_root = 26;
  optional bytes epoch_sync_data_hash = 27;
  repeated OptionalSignature approvals = 28;
  Signature signature = 29;
  uint32 latest_protocol_version = 30;
}

message ValidatorStakeView {
  message ValidatorStakeViewV1 {
    string account_id = 1;
    PublicKey public_key = 2;
    bytes stake = 3;
  }
  oneof variant {
    ValidatorStakeViewV1 v1 = 1;
  }
}

message SlashedValidator {
  string account_id = 1;
  bool is_double_sign = 2;
}

message OptionalSignature {
  optional Signature value = 1;
}

message Signature {
  message ED25519 {
    bytes value = 1;
  }
  message SECP256K1 {
    bytes value = 1;
  }
  oneof variant {
    ED25519 ed25519 = 1;
    SECP256K1 secp256k1 = 2;
  }
}

message Shard {
  uint64 shard_id = 1;
  optional ChunkView chunk = 2;
  repeated ExecutionOutcomeWithReceipt receipt_execution_outcomes = 3;
  repeated StateChangeWithCauseView state_changes = 4;
}

message ChunkView {
  string author = 1;
  ChunkHeaderView header = 2;
  repeated TransactionWithOutcome transactions = 3;
  repeated ReceiptView receipts = 4;
}

message ChunkHeaderView {
  bytes chunk_hash = 1;
  bytes prev_block_hash = 2;
  bytes outcome_root = 3;
  bytes prev_state_root = 4;
  bytes encoded_merkle_root = 5;
  uint64 encoded_length = 6;
  uint64 height_created = 7;
  uint64 height_included = 8;
  uint64 shard_id = 9;
  uint64 gas_used = 10;
  uint64 gas_limit = 11;
  bytes validator_reward = 12;
  bytes balance_burnt = 13;
  bytes outgoing_receipts_root = 14;
  bytes tx_root = 15;
  repeated ValidatorStakeView validator_proposals = 16;
  Signature signature = 17;
}

message TransactionWithOutcome {
  SignedTransactionView transaction = 1;
  ExecutionOutcomeWithOptionalReceipt outcome = 2;
}

message SignedTransactionView {
  string signer_id = 1;
  PublicKey public_key = 2;
  uint64 nonce = 3;
  string receiver_id = 4;
  repeated ActionView actions = 5;
  Signature signature = 6;
  bytes hash = 7;
}

message ExecutionOutcomeWithOptionalReceipt {
  ExecutionOutcomeWithIdView execution_outcome = 1;
  optional ReceiptView receipt = 2;
}

message ExecutionOutcomeWithReceipt {
  ExecutionOutcomeWithIdView execution_outcome = 1;
  ReceiptView receipt = 2;
}

message ExecutionOutcomeWithIdView {
  repeated MerklePathItem proof = 1;
  bytes block_hash = 2;
  bytes id = 3;
  ExecutionOutcomeView outcome = 4;
}

message MerklePathItem {
  bytes hash = 1;
  Direction direction = 2;
}

enum Direction {
  LEFT = 0;
  RIGHT = 1;
}

message ExecutionOutcomeView {
  repeated string logs = 1;
  repeated bytes receipt_ids = 2;
  uint64 gas_burnt = 3;
  bytes tokens_burnt = 4;
  string executor_id = 5;
  ExecutionStatusView status = 6;
  ExecutionMetadataView metadata = 7;
}

message ExecutionStatusView {
  message Unknown {}
  message Failure {
    TxExecutionError error = 1;
  }
  message SuccessValue {
    bytes value = 1;
  }
  message SuccessReceiptId {
    bytes receipt_hash = 1;
  }
  oneof variant {
    Unknown unknown = 1;
    Failure failure = 2;
    SuccessValue success_value = 3;
    SuccessReceiptId success_receipt_id = 4;
  }
}

// Describes the error for validating a list of actions.
message ActionsValidationError {
  // The delete action must be a final aciton in transaction
  message DeleteActionMustBeFinal {}
  // The total prepaid gas (for all given actions) exceeded the limit.
  message TotalPrepaidGasExceeded {
    uint64 total_prepaid_gas = 1;
    uint64 limit = 2;
  }
  // The number of actions exceeded the given limit.
  message TotalNumberOfActionsExceeded {
    uint64 total_number_of_bytes = 1;
    uint64 limit = 2;
  }
  // The total number of bytes of the method names exceeded the limit in a Add Key action.
  message AddKeyMethodNamesNumberOfBytesExceeded {
    uint64 total_number_of_bytes = 1;
    uint64 limit = 2;
  }
  // The length of some method name exceeded the limit in a Add Key action.
  message AddKeyMethodNameLengthExceeded {
    uint64 length = 1;
    uint64 limit = 2;
  }
  // Integer overflow during a compute.
  message IntegerOverflow {}
  // Invalid account ID.
  message InvalidAccountId {
    string account_id = 1;
  }
  // The size of the contract code exceeded the limit in a DeployContract action.
  message ContractSizeExceeded {
    uint64 size = 1;
    uint64 limit = 2;
  }
  // The length of the method name exceeded the limit in a Function Call action.
  message FunctionCallMethodNameLengthExceeded {
    uint64 length = 1;
    uint64 limit = 2;
  }
  // The length of the arguments exceeded the limit in a Function Call action.
  message FunctionCallArgumentsLengthExceeded {
    uint64 length = 1;
    uint64 limit = 2;
  }
  // An attempt to stake with a public key that is not convertible to ristretto.
  message UnsuitableStakingKey {
    PublicKey public_key = 1;
  }
  // The attached amount of gas in a FunctionCall action has to be a positive number.
  message FunctionCallZeroAttachedGas {}
  oneof variant {
    DeleteActionMustBeFinal delete_action_must_be_final = 1;
    TotalPrepaidGasExceeded total_prepaid_gas_exceeded = 2;
    TotalNumberOfActionsExceeded total_number_of_actions_exceeded = 3;
    AddKeyMethodNamesNumberOfBytesExceeded add_key_method_names_number_of_bytes_exceeded = 4;
    AddKeyMethodNameLengthExceeded add_key_method_name_length_exceeded = 5;
    IntegerOverflow integer_overflow = 6;
    InvalidAccountId invalid_account_id = 7;
    ContractSizeExceeded contract_size_exceeded = 8;
    FunctionCallMethodNameLengthExceeded function_call_method_name_length_exceeded = 9;
    FunctionCallArgumentsLengthExceeded function_call_arguments_length_exceeded = 10;
    UnsuitableStakingKey unsuitable_staking_key = 11;
    FunctionCallZeroAttachedGas function_call_zero_attached_gas = 12;
  }
}

// Describes the error for validating a receipt.
message ReceiptValidationError {
  // The `predecessor_id` of a Receipt is not valid.
  message InvalidPredecessorId {
    string account_id = 1;
  }
  // The `receiver_id` of a Receipt is not valid.
  message InvalidReceiverId {
    string account_id = 1;
  }
  // The `signer_id` of an ActionReceipt is not valid.
  message InvalidSignerId {
    string account_id = 1;
  }
  // The `receiver_id` of a DataReceiver within an ActionReceipt is not valid.
  message InvalidDataReceiverId {
    string account_id = 1;
  }
  // The length of the returned data exceeded the limit in a DataReceipt.
  message ReturnedValueLengthExceeded {
    uint64 length = 1;
    uint64 limit = 2;
  }
  // The number of input data dependencies exceeds the limit in an ActionReceipt.
  message NumberInputDataDependenciesExceeded {
    uint64 number_of_input_data_dependencies = 1;
    uint64 limit = 2;
  }
  // An error occurred while validating actions of an ActionReceipt.
  message ActionsValidation {
    ActionsValidationError error = 1;
  }
  oneof variant {
    InvalidPredecessorId invalid_predecessor_id = 1;
    InvalidReceiverId invalid_receiver_id = 2;
    InvalidSignerId invalid_signer_id = 3;
    InvalidDataReceiverId invalid_data_receiver_id = 4;
    ReturnedValueLengthExceeded returned_value_length_exceeded = 5;
    NumberInputDataDependenciesExceeded number_input_data_dependencies_exceeded = 6;
    ActionsValidation actions_validation = 7;
  }
}

// A kind of a trap happened during execution of a binary
enum WasmTrap {
  // An `unreachable` opcode was executed.
  UNREACHABLE = 0;
  // Call indirect incorrect signature trap.
  INCORRECT_CALL_INDIRECT_SIGNATURE = 1;
  // Memory out of bounds trap.
  MEMORY_OUT_OF_BOUNDS = 2;
  // Call indirect out of bounds trap.
  CALL_INDIRECT_OOB = 3;
  // An arithmetic exception = 0; e.g. divided by zero.
  ILLEGAL_ARITHMETIC = 4;
  // Misaligned atomic access trap.
  MISALIGNED_ATOMIC_ACCESS = 5;
  // Indirect call to null.
  INDIRECT_CALL_TO_NULL = 6;
  // Stack overflow.
  STACK_OVERFLOW = 7;
  // Generic trap.
  GENERIC_TRAP = 8;
}

enum MethodResolveError {
  METHOD_EMPTY_NAME = 0;
  METHOD_NOT_FOUND = 1;
  METHOD_INVALID_SIGNATURE = 2;
}

// Error that can occur while preparing or executing Wasm smart-contract.
enum PrepareError {
  // Error happened while serializing the module.
  SERIALIZATION = 0;
  // Error happened while deserializing the module.
  DESERIALIZATION = 1;
  // Internal memory declaration has been found in the module.
  INTERNAL_MEMORY_DECLARED = 2;
  // Gas instrumentation failed.
  //
  // This most likely indicates the module isn't valid.
  GAS_INSTRUMENTATION = 3;
  // Stack instrumentation failed.
  //
  // This  most likely indicates the module isn't valid.
  STACK_HEIGHT_INSTRUMENTATION = 4;
  // Error happened during instantiation.
  //
  // This might indicate that `start` function trapped, or module isn't
  // instantiable and/or unlinkable.
  INSTANTIATE = 5;
  // Error creating memory.
  MEMORY = 6;
  // Contract contains too many functions.
  TOO_MANY_FUNCTIONS = 7;
  // Contract contains too many locals.
  TOO_MANY_LOCALS = 8;
}

message CompilationError {
  message CodeDoesNotExist {
    string account_id = 1;
  }
  message PrepareError {
    .PrepareError error = 1;
  }
  message WasmerCompileError {
    string msg = 1;
  }
  message UnsupportedCompiler {
    string msg = 1;
  }
  oneof variant {
    CodeDoesNotExist code_does_not_exist = 1;
    PrepareError prepare_error = 2;
    WasmerCompileError wasmer_compile_error = 3;
    UnsupportedCompiler unsupported_compiler = 4;
  }
}

message HostError {
  // String encoding is bad UTF-16 sequence
  message BadUTF16 {}
  // String encoding is bad UTF-8 sequence
  message BadUTF8 {}
  // Exceeded the prepaid gas
  message GasExceeded {}
  // Exceeded the maximum amount of gas allowed to burn per contract
  message GasLimitExceeded {}
  // Exceeded the account balance
  message BalanceExceeded {}
  // Tried to call an empty method name
  message EmptyMethodName {}
  // Smart contract panicked
  message GuestPanic { string panic_msg = 1; }
  // IntegerOverflow happened during a contract execution
  message IntegerOverflow {}
  // `promise_idx` does not correspond to existing promises
  message InvalidPromiseIndex { uint64 promise_idx = 1; }
  // Actions can only be appended to non-joint promise.
  message CannotAppendActionToJointPromise {}
  // Returning joint promise is currently prohibited
  message CannotReturnJointPromise {}
  // Accessed invalid promise result index
  message InvalidPromiseResultIndex { uint64 result_idx = 1; }
  // Accessed invalid register id
  message InvalidRegisterId { uint64 register_id = 1; }
  // Iterator `iterator_index` was invalidated after its creation by performing a mutable operation on trie
  message IteratorWasInvalidated { uint64 iterator_index = 1; }
  // Accessed memory outside the bounds
  message MemoryAccessViolation {}
  // VM Logic returned an invalid receipt index
  message InvalidReceiptIndex { uint64 receipt_index = 1; }
  // Iterator index `iterator_index` does not exist
  message InvalidIteratorIndex { uint64 iterator_index = 1; }
  // VM Logic returned an invalid account id
  message InvalidAccountId {}
  // VM Logic returned an invalid method name
  message InvalidMethodName {}
  // VM Logic provided an invalid public key
  message InvalidPublicKey {}
  // `method_name` is not allowed in view calls
  message ProhibitedInView { string method_name = 1; }
  // The total number of logs will exceed the limit.
  message NumberOfLogsExceeded { uint64 limit = 1; }
  // The storage key length exceeded the limit.
  message KeyLengthExceeded { uint64 length = 1; uint64 limit = 2; }
  // The storage value length exceeded the limit.
  message ValueLengthExceeded { uint64 length = 1; uint64 limit = 2; }
  // The total log length exceeded the limit.
  message TotalLogLengthExceeded { uint64 length = 1; uint64 limit = 2; }
  // The maximum number of promises within a FunctionCall exceeded the limit.
  message NumberPromisesExceeded { uint64 number_of_promises = 1; uint64 limit = 2; }
  // The maximum number of input data dependencies exceeded the limit.
  message NumberInputDataDependenciesExceeded { uint64 number_of_input_data_dependencies = 1; uint64 limit = 2; }
  // The returned value length exceeded the limit.
  message ReturnedValueLengthExceeded { uint64 length = 1; uint64 limit = 2; }
  // The contract size for DeployContract action exceeded the limit.
  message ContractSizeExceeded { uint64 size = 1; uint64 limit = 2; }
  // The host function was deprecated.
  message Deprecated { string method_name = 1; }
  // General errors for ECDSA recover.
  message ECRecoverError { string msg = 1; }
  // Invalid input to alt_bn128 familiy of functions (e.g., point which isn't
  // on the curve).
  message AltBn128InvalidInput { string msg = 1; }
  oneof variant {
    BadUTF16 bad_utf16 = 1;
    BadUTF8 bad_utf8 = 2;
    GasExceeded gas_exceeded = 3;
    GasLimitExceeded gas_limit_exceeded = 4;
    BalanceExceeded balance_exceeded = 5;
    EmptyMethodName empty_method_name = 6;
    GuestPanic guest_panic = 7;
    IntegerOverflow integer_overflow = 8;
    InvalidPromiseIndex invalid_promise_index = 9;
    CannotAppendActionToJointPromise cannot_append_action_to_joint_promise = 10;
    CannotReturnJointPromise cannot_return_joint_promise = 11;
    InvalidPromiseResultIndex invalid_promise_result_index = 12;
    InvalidRegisterId invalid_register_id = 13;
    IteratorWasInvalidated iterator_was_invalidated = 14;
    MemoryAccessViolation memory_access_violation = 15;
    InvalidReceiptIndex invalid_receipt_index = 16;
    InvalidIteratorIndex invalid_iterator_index = 17;
    InvalidAccountId invalid_account_id = 18;
    InvalidMethodName invalid_method_name = 19;
    InvalidPublicKey invalid_public_key = 20;
    ProhibitedInView prohibited_in_view = 21;
    NumberOfLogsExceeded number_of_logs_exceeded = 22;
    KeyLengthExceeded key_length_exceeded = 23;
    ValueLengthExceeded value_length_exceeded = 24;
    TotalLogLengthExceeded total_log_length_exceeded = 25;
    NumberPromisesExceeded number_promises_exceeded = 26;
    NumberInputDataDependenciesExceeded number_input_data_dependencies_exceeded = 27;
    ReturnedValueLengthExceeded returned_value_length_exceeded = 28;
    ContractSizeExceeded contract_size_exceeded = 29;
    Deprecated deprecated = 30;
    ECRecoverError ecrecover_error = 31;
    AltBn128InvalidInput alt_bn_128_invalid_input = 32;
  }
}

message FunctionCallErrorSer {
  // Wasm compilation error
  message CompilationError {
    .CompilationError error = 1;
  }
  // Wasm binary env link error
  message LinkError {
    string msg = 1;
  }
  // Import/export resolve error
  message MethodResolveError {
    .MethodResolveError error = 1;
  }
  // A trap happened during execution of a binary
  message WasmTrap {
    .WasmTrap error = 1;
  }
  message WasmUnknownError {}
  message HostError {
    .HostError error = 1;
  }
  message ExecutionError {
    string message = 1;
  }
  oneof variant {
    CompilationError compilation_error = 1;
    LinkError link_error = 2;
    MethodResolveError method_resolve_error = 3;
    WasmTrap wasm_trap = 4;
    WasmUnknownError wasm_unknown_error = 5;
    HostError host_error = 6;
    ExecutionError execution_error = 7;
  }
}

message TxExecutionError {
  message ActionError {
    message ActionErrorKind {
      // Happens when CreateAccount action tries to create an account with account_id which is already exists in the storage
      message AccountAlreadyExists {
        string account_id = 1;
      }
      // Happens when TX receiver_id doesn't exist (but action is not Action::CreateAccount)
      message AccountDoesNotExist {
        string account_id = 1;
      }
      // A top-level account ID can only be created by registrar.
      message CreateAccountOnlyByRegistrar {
        string account_id = 1;
        string registrar_account_id = 2;
        string predecessor_id = 3;
      }
      // A newly created account must be under a namespace of the creator account
      message CreateAccountNotAllowed {
        string account_id = 1;
        string predecessor_id = 2;
      }
      // Administrative actions like `DeployContract`, `Stake`, `AddKey`, `DeleteKey`. can be proceed only if sender=receiver
      // or the first TX action is a `CreateAccount` action
      message ActorNoPermission {
        string account_id = 1;
        string actor_id = 2;
      }
      // Account tries to remove an access key that doesn't exist
      message DeleteKeyDoesNotExist {
        string account_id = 1;
        PublicKey public_key = 2;
      }
      // The public key is already used for an existing access key
      message AddKeyAlreadyExists {
        string account_id = 1;
        PublicKey public_key = 2;
      }
      // Account is staking and can not be deleted
      message DeleteAccountStaking {
        string account_id = 1;
      }
      // ActionReceipt can't be completed, because the remaining balance will not be enough to cover storage.
      message LackBalanceForState {
        // An account which needs balance
        string account_id = 1;
        // Balance required to complete an action.
        bytes amount = 2;
      }
      // Account is not yet staked, but tries to unstake
      message TriesToUnstake {
        string account_id = 1;
      }
      // The account doesn't have enough balance to increase the stake.
      message TriesToStake {
        string account_id = 1;
        bytes stake = 2;
        bytes locked = 3;
        bytes balance = 4;
      }
      message InsufficientStake {
        string account_id = 1;
        bytes stake = 2;
        bytes minimum_stake = 3;
      }
      // An error occurred during a `FunctionCall` Action, parameter is debug message.
      message FunctionCallError {
        FunctionCallErrorSer error = 1;
      }
      // Error occurs when a new `ActionReceipt` created by the `FunctionCall` action fails
      // receipt validation.
      message NewReceiptValidationError {
        ReceiptValidationError error = 1;
      }
      // Error occurs when a `CreateAccount` action is called on hex-characters
      // account of length 64.  See implicit account creation NEP:
      // <https://github.com/nearprotocol/NEPs/pull/71>.
      message OnlyImplicitAccountCreationAllowed {
        string account_id = 1;
      }
      // Delete account whose state is large is temporarily banned.
      message DeleteAccountWithLargeState {
        string account_id = 1;
      }
      oneof variant {
        AccountAlreadyExists account_already_exists = 1;
        AccountDoesNotExist account_does_not_exist = 2;
        CreateAccountOnlyByRegistrar create_account_only_by_registrar = 3;
        CreateAccountNotAllowed create_account_not_allowed = 4;
        ActorNoPermission actor_no_permission = 5;
        DeleteKeyDoesNotExist delete_key_does_not_exist = 6;
        AddKeyAlreadyExists add_key_already_exists = 7;
        DeleteAccountStaking delete_account_staking = 8;
        LackBalanceForState lack_balance_for_state = 9;
        TriesToUnstake tries_to_unstake = 10;
        TriesToStake tries_to_stake = 11;
        InsufficientStake insufficient_stake = 12;
        FunctionCallError function_call_error = 13;
        NewReceiptValidationError new_receipt_validation_error = 14;
        OnlyImplicitAccountCreationAllowed only_implicit_account_creation_allowed = 15;
        DeleteAccountWithLargeState delete_account_with_large_state = 16;
      }
    }
    optional uint64 index = 1;
    ActionErrorKind kind = 2;
  }
  message InvalidTxError {
    message InvalidAccessKeyError {
      message AccessKeyNotFound {
        string account_id = 1;
        PublicKey public_key = 2;
      }
      message ReceiverMismatch {
        string tx_receiver = 1;
        string ak_receiver = 2;
      }
      message MethodNameMismatch {
        string method_name = 1;
      }
      message RequiresFullAccess {}
      message NotEnoughAllowance {
        string account_id = 1;
        PublicKey public_key = 2;
        bytes allowance = 3;
        bytes cost = 4;
      }
      message DepositWithFunctionCall {}
      oneof variant {
        AccessKeyNotFound access_key_not_found = 1;
        ReceiverMismatch receiver_mismatch = 2;
        MethodNameMismatch method_name_mismatch = 3;
        RequiresFullAccess requires_full_access = 4;
        NotEnoughAllowance not_enough_allowance = 5;
        DepositWithFunctionCall deposit_with_function_call = 6;
      }
    }
    message InvalidSignerId {
      string signer_id = 1;
    }
    message SignerDoesNotExist {
      string signer_id = 1;
    }
    message InvalidNonce {
      uint64 tx_nonce = 1;
      uint64 ak_nonce = 2;
    }
    message NonceTooLarge {
      uint64 tx_nonce = 1;
      uint64 upper_bound = 2;
    }
    message InvalidReceiverId {
      string receiver_id = 1;
    }
    message InvalidSignature {}
    message NotEnoughBalance {
      string signer_id = 1;
      bytes balance = 2;
      bytes cost = 3;
    }
    message LackBalanceForState {
      string signer_id = 1;
      bytes amount = 2;
    }
    message CostOverflow {}
    message InvalidChain {}
    message Expired {}
    message ActionsValidation {
      message DeleteActionMustBeFinal {}
      message TotalPrepaidGasExceeded {
        uint64 total_prepaid_gas = 1;
        uint64 limit = 2;
      }
      message TotalNumberOfActionsExceeded {
        uint64 total_number_of_actions = 1;
        uint64 limit = 2;
      }
      message AddKeyMethodNamesNumberOfBytesExceeded {
        uint64 total_number_of_bytes = 1;
        uint64 limit = 2;
      }
      message AddKeyMethodNameLengthExceeded {
        uint64 length = 1;
        uint64 limit = 2;
      }
      message IntegerOverflow {}
      message InvalidAccountId {
        string account_id = 1;
      }
      message ContractSizeExceeded {
        uint64 size = 1;
        uint64 limit = 2;
      }
      message FunctionCallMethodNameLengthExceeded {
        uint64 length = 1;
        uint64 limit = 2;
      }
      message FunctionCallArgumentsLengthExceeded {
        uint64 length = 1;
        uint64 limit = 2;
      }
      message UnsuitableStakingKey {
        PublicKey public_key = 1;
      }
      message FunctionCallZeroAttachedGas {}
      oneof variant {
        DeleteActionMustBeFinal delete_action_must_be_final = 1;
        TotalPrepaidGasExceeded total_prepaid_gas_exceeded = 2;
        TotalNumberOfActionsExceeded total_number_of_actions_exceeded = 3;
        AddKeyMethodNamesNumberOfBytesExceeded add_key_method_names_number_of_bytes_exceeded = 4;
        AddKeyMethodNameLengthExceeded add_key_method_name_length_exceeded = 5;
        IntegerOverflow integer_overflow = 6;
        InvalidAccountId invalid_account_id = 7;
        ContractSizeExceeded contract_size_exceeded = 8;
        FunctionCallMethodNameLengthExceeded function_call_method_name_length_exceeded = 9;
        FunctionCallArgumentsLengthExceeded function_call_arguments_length_exceeded = 10;
        UnsuitableStakingKey unsuitable_staking_key = 11;
        FunctionCallZeroAttachedGas function_call_zero_attached_gas = 12;
      }
    }
    message TransactionSizeExceeded {
      uint64 size = 1;
      uint64 limit = 2;
    }
    oneof variant {
      InvalidAccessKeyError invalid_access_key_error = 1;
      InvalidSignerId invalid_signer_id = 2;
      SignerDoesNotExist signer_does_not_exist = 3;
      InvalidNonce invalid_nonce = 4;
      NonceTooLarge nonce_too_large = 5;
      InvalidReceiverId invalid_receiver_id = 6;
      InvalidSignature invalid_signature = 7;
      NotEnoughBalance not_enough_balance = 8;
      LackBalanceForState lack_balance_for_state = 9;
      CostOverflow cost_overflow = 10;
      InvalidChain invalid_chain = 11;
      Expired expired = 12;
      ActionsValidation actions_validation = 13;
      TransactionSizeExceeded transaction_size_exceeded = 14;
    }
  }
  oneof variant {
    ActionError action_error = 1;
    InvalidTxError invalid_tx_error = 2;
  }
}

message ExecutionMetadataView {
  message RepeatedCostGasUsed {
    repeated CostGasUsed gas_profile = 2;
  }
  uint32 version = 1;
  optional RepeatedCostGasUsed gas_profile = 2;
}

message CostGasUsed {
  string cost_category = 1;
  string cost = 2;
  uint64 gas_used = 3;
}

message ReceiptView {
  string predecessor_id = 1;
  string receiver_id = 2;
  bytes receipt_id = 3;
  ReceiptEnumView receipt = 4;
}

message ReceiptEnumView {
  message Action {
    string signer_id = 1;
    PublicKey signer_public_key = 2;
    bytes gas_price = 3;
    repeated DataReceiverView output_data_receivers = 4;
    repeated bytes input_data_ids = 5;
    repeated ActionView actions = 6;
  }
  message Data {
    bytes data_id = 1;
    optional bytes data = 2;
  }
  oneof variant {
    Action action = 1;
    Data data = 2;
  }
}

message DataReceiverView {
  bytes data_id = 1;
  string receiver_id = 2;
}

message ActionView {
  message CreateAccount {}
  message DeployContract {
    bytes code = 1;
  }
  message FunctionCall {
    string method_name = 1;
    bytes args = 2;
    uint64 gas = 3;
    bytes deposit = 4;
  }
  message Transfer {
    bytes deposit = 1;
  }
  message Stake {
    bytes stake = 1;
    PublicKey public_key = 2;
  }
  message AddKey {
    PublicKey public_key = 1;
    AccessKeyView access_key = 2;
  }
  message DeleteKey {
    PublicKey public_key = 1;
  }
  message DeleteAccount {
    string beneficiary_id = 1;
  }
  oneof variant {
    CreateAccount create_account = 1;
    DeployContract deploy_contract = 2;
    FunctionCall function_call = 3;
    Transfer transfer = 4;
    Stake stake = 5;
    AddKey add_key = 6;
    DeleteKey delete_key = 7;
    DeleteAccount delete_account = 8;
  }
}

message AccessKeyView {
  uint64 nonce = 1;
  AccessKeyPermissionView permission = 2;
}

message AccessKeyPermissionView {
  message FunctionCall {
    optional bytes allowance = 1;
    string receiver_id = 2;
    repeated string method_names = 3;
  }
  message FullAccess {}
  oneof variant {
    FunctionCall function_call = 1;
    FullAccess full_access = 2;
  }
}

message StateChangeWithCauseView {
  StateChangeCauseView cause = 1;
  StateChangeValueView value = 2;
}

message StateChangeCauseView {
  message NotWritableToDisk {}
  message InitialState {}
  message TransactionProcessing {
    bytes tx_hash = 1;
  }
  message ActionReceiptProcessingStarted {
    bytes receipt_hash = 1;
  }
  message ActionReceiptGasReward {
    bytes receipt_hash = 1;
  }
  message ReceiptProcessing {
    bytes receipt_hash = 1;
  }
  message PostponedReceipt {
    bytes receipt_hash = 1;
  }
  message UpdatedDelayedReceipts {}
  message ValidatorAccountsUpdate {}
  message Migration {}
  message Resharding {}
  oneof variant {
    NotWritableToDisk not_writable_to_disk = 1;
    InitialState initial_state = 2;
    TransactionProcessing transaction_processing = 3;
    ActionReceiptProcessingStarted action_receipt_processing_started = 4;
    ActionReceiptGasReward action_receipt_gas_reward = 5;
    ReceiptProcessing receipt_processing = 6;
    PostponedReceipt postponed_receipt = 7;
    UpdatedDelayedReceipts updated_delayed_receipts = 8;
    ValidatorAccountsUpdate validator_accounts_update = 9;
    Migration migration = 10;
    Resharding resharding = 11;
  }
}

message StateChangeValueView {
  message AccountUpdate {
    string account_id = 1;
    AccountView account = 2;
  }
  message AccountDeletion {
    string account_id = 1;
  }
  message AccessKeyUpdate {
    string account_id = 1;
    PublicKey public_key = 2;
    AccessKeyView access_key = 3;
  }
  message AccessKeyDeletion {
    string account_id = 1;
    PublicKey public_key = 2;
  }
  message DataUpdate {
    string account_id = 1;
    bytes key = 2;
    bytes value = 3;
  }
  message DataDeletion {
    string account_id = 1;
    bytes key = 2;
  }
  message ContractCodeUpdate {
    string account_id = 1;
    bytes code = 2;
  }
  message ContractCodeDeletion {
    string account_id = 1;
  }
  oneof variant {
    AccountUpdate account_update = 1;
    AccountDeletion account_deletion = 2;
    AccessKeyUpdate access_key_update = 3;
    AccessKeyDeletion access_key_deletion = 4;
    DataUpdate data_update = 5;
    DataDeletion data_deletion = 6;
    ContractCodeUpdate contract_code_update = 7;
    ContractCodeDeletion contract_code_deletion = 8;
  }
}

message AccountView {
  bytes amount = 1;
  bytes locked = 2;
  bytes code_hash = 3;
  uint64 storage_usage = 4;
  uint64 storage_paid_at = 5;
}

message RpcRequest {
  uint32 version = 1;
  bytes content = 2;
  map<string, bytes> annotations = 3;
}

message RpcResponse {
  uint32 version = 1;
  bytes content = 2;
  map<string, bytes> annotations = 3;
}

message GetAccountStatusRequest {
  string account = 1;
}

message GetAccountStatusResponse {
  string account = 1;
  GetAccountStatusResponseQuota api_quota = 2;
  repeated string api_tokens = 3;
}

message GetAccountStatusResponseQuota {
  uint64 transaction_count = 1;
  uint64 transaction_limit = 2;
}

message PublicKey {
  message ED25519 {
    bytes value = 1;
  }
  message SECP256K1 {
    bytes value = 1;
  }
  oneof variant {
    ED25519 ed25519 = 1;
    SECP256K1 secp256k1 = 2;
  }
}
