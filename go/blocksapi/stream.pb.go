// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v3.21.12
// source: blocksapi/stream.proto

package blocksapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines initial stream seek behavior for given target message ID
type BlockStreamStartPolicy int32

const (
	// Start on earliest available message
	BlockStreamStartPolicy_START_ON_EARLIEST_AVAILABLE BlockStreamStartPolicy = 0
	// Start on latest available message
	BlockStreamStartPolicy_START_ON_LATEST_AVAILABLE BlockStreamStartPolicy = 1
	// Start exactly on target, return error if no such target
	BlockStreamStartPolicy_START_EXACTLY_ON_TARGET BlockStreamStartPolicy = 2
	// Start on message which comes exactly after target, return error if no such target
	BlockStreamStartPolicy_START_EXACTLY_AFTER_TARGET BlockStreamStartPolicy = 3
	// Start on earliest available message that is greater or equal to target
	BlockStreamStartPolicy_START_ON_CLOSEST_TO_TARGET BlockStreamStartPolicy = 4
	// Start on earliest available message that is strictly greater than target
	BlockStreamStartPolicy_START_ON_EARLIEST_AFTER_TARGET BlockStreamStartPolicy = 5
)

// Enum value maps for BlockStreamStartPolicy.
var (
	BlockStreamStartPolicy_name = map[int32]string{
		0: "START_ON_EARLIEST_AVAILABLE",
		1: "START_ON_LATEST_AVAILABLE",
		2: "START_EXACTLY_ON_TARGET",
		3: "START_EXACTLY_AFTER_TARGET",
		4: "START_ON_CLOSEST_TO_TARGET",
		5: "START_ON_EARLIEST_AFTER_TARGET",
	}
	BlockStreamStartPolicy_value = map[string]int32{
		"START_ON_EARLIEST_AVAILABLE":    0,
		"START_ON_LATEST_AVAILABLE":      1,
		"START_EXACTLY_ON_TARGET":        2,
		"START_EXACTLY_AFTER_TARGET":     3,
		"START_ON_CLOSEST_TO_TARGET":     4,
		"START_ON_EARLIEST_AFTER_TARGET": 5,
	}
)

func (x BlockStreamStartPolicy) Enum() *BlockStreamStartPolicy {
	p := new(BlockStreamStartPolicy)
	*p = x
	return p
}

func (x BlockStreamStartPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockStreamStartPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_blocksapi_stream_proto_enumTypes[0].Descriptor()
}

func (BlockStreamStartPolicy) Type() protoreflect.EnumType {
	return &file_blocksapi_stream_proto_enumTypes[0]
}

func (x BlockStreamStartPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockStreamStartPolicy.Descriptor instead.
func (BlockStreamStartPolicy) EnumDescriptor() ([]byte, []int) {
	return file_blocksapi_stream_proto_rawDescGZIP(), []int{0}
}

// Defines how service should behave if start target is not yet available
type BlockStreamCatchUpPolicy int32

const (
	// Return error if catch up needed
	BlockStreamCatchUpPolicy_CATCH_UP_PANIC BlockStreamCatchUpPolicy = 0
	// Don't send anything until catch up
	BlockStreamCatchUpPolicy_CATCH_UP_WAIT BlockStreamCatchUpPolicy = 1
	// Stream normally from whatever is available before start target
	BlockStreamCatchUpPolicy_CATCH_UP_STREAM BlockStreamCatchUpPolicy = 2
)

// Enum value maps for BlockStreamCatchUpPolicy.
var (
	BlockStreamCatchUpPolicy_name = map[int32]string{
		0: "CATCH_UP_PANIC",
		1: "CATCH_UP_WAIT",
		2: "CATCH_UP_STREAM",
	}
	BlockStreamCatchUpPolicy_value = map[string]int32{
		"CATCH_UP_PANIC":  0,
		"CATCH_UP_WAIT":   1,
		"CATCH_UP_STREAM": 2,
	}
)

func (x BlockStreamCatchUpPolicy) Enum() *BlockStreamCatchUpPolicy {
	p := new(BlockStreamCatchUpPolicy)
	*p = x
	return p
}

func (x BlockStreamCatchUpPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockStreamCatchUpPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_blocksapi_stream_proto_enumTypes[1].Descriptor()
}

func (BlockStreamCatchUpPolicy) Type() protoreflect.EnumType {
	return &file_blocksapi_stream_proto_enumTypes[1]
}

func (x BlockStreamCatchUpPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockStreamCatchUpPolicy.Descriptor instead.
func (BlockStreamCatchUpPolicy) EnumDescriptor() ([]byte, []int) {
	return file_blocksapi_stream_proto_rawDescGZIP(), []int{1}
}

// Defines when stream has to stop
type BlockStreamStopPolicy int32

const (
	// Follow new blocks
	BlockStreamStopPolicy_STOP_NEVER BlockStreamStopPolicy = 0
	// Don't send messages greater than target
	BlockStreamStopPolicy_STOP_AFTER_TARGET BlockStreamStopPolicy = 1
	// Don't send messages greater or equal to target
	BlockStreamStopPolicy_STOP_BEFORE_TARGET BlockStreamStopPolicy = 2
)

// Enum value maps for BlockStreamStopPolicy.
var (
	BlockStreamStopPolicy_name = map[int32]string{
		0: "STOP_NEVER",
		1: "STOP_AFTER_TARGET",
		2: "STOP_BEFORE_TARGET",
	}
	BlockStreamStopPolicy_value = map[string]int32{
		"STOP_NEVER":         0,
		"STOP_AFTER_TARGET":  1,
		"STOP_BEFORE_TARGET": 2,
	}
)

func (x BlockStreamStopPolicy) Enum() *BlockStreamStopPolicy {
	p := new(BlockStreamStopPolicy)
	*p = x
	return p
}

func (x BlockStreamStopPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockStreamStopPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_blocksapi_stream_proto_enumTypes[2].Descriptor()
}

func (BlockStreamStopPolicy) Type() protoreflect.EnumType {
	return &file_blocksapi_stream_proto_enumTypes[2]
}

func (x BlockStreamStopPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockStreamStopPolicy.Descriptor instead.
func (BlockStreamStopPolicy) EnumDescriptor() ([]byte, []int) {
	return file_blocksapi_stream_proto_rawDescGZIP(), []int{2}
}

type BlockStreamErrorClass int32

const (
	// Default error class
	BlockStreamErrorClass_STREAM_ERROR_UNKNOWN BlockStreamErrorClass = 0
	// Catch up required, but policy is CATCH_UP_PANIC
	BlockStreamErrorClass_STREAM_ERROR_CATCHUP_REQUIRED BlockStreamErrorClass = 1
	// Bad request (BlockStreamRequest)
	BlockStreamErrorClass_STREAM_ERROR_BAD_REQUEST BlockStreamErrorClass = 2
)

// Enum value maps for BlockStreamErrorClass.
var (
	BlockStreamErrorClass_name = map[int32]string{
		0: "STREAM_ERROR_UNKNOWN",
		1: "STREAM_ERROR_CATCHUP_REQUIRED",
		2: "STREAM_ERROR_BAD_REQUEST",
	}
	BlockStreamErrorClass_value = map[string]int32{
		"STREAM_ERROR_UNKNOWN":          0,
		"STREAM_ERROR_CATCHUP_REQUIRED": 1,
		"STREAM_ERROR_BAD_REQUEST":      2,
	}
)

func (x BlockStreamErrorClass) Enum() *BlockStreamErrorClass {
	p := new(BlockStreamErrorClass)
	*p = x
	return p
}

func (x BlockStreamErrorClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockStreamErrorClass) Descriptor() protoreflect.EnumDescriptor {
	return file_blocksapi_stream_proto_enumTypes[3].Descriptor()
}

func (BlockStreamErrorClass) Type() protoreflect.EnumType {
	return &file_blocksapi_stream_proto_enumTypes[3]
}

func (x BlockStreamErrorClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockStreamErrorClass.Descriptor instead.
func (BlockStreamErrorClass) EnumDescriptor() ([]byte, []int) {
	return file_blocksapi_stream_proto_rawDescGZIP(), []int{3}
}

type BlockStreamFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludeShards bool     `protobuf:"varint,1,opt,name=exclude_shards,json=excludeShards,proto3" json:"exclude_shards,omitempty"`
	FilterShards  []uint64 `protobuf:"varint,2,rep,packed,name=filter_shards,json=filterShards,proto3" json:"filter_shards,omitempty"`
}

func (x *BlockStreamFilter) Reset() {
	*x = BlockStreamFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocksapi_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStreamFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStreamFilter) ProtoMessage() {}

func (x *BlockStreamFilter) ProtoReflect() protoreflect.Message {
	mi := &file_blocksapi_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStreamFilter.ProtoReflect.Descriptor instead.
func (*BlockStreamFilter) Descriptor() ([]byte, []int) {
	return file_blocksapi_stream_proto_rawDescGZIP(), []int{0}
}

func (x *BlockStreamFilter) GetExcludeShards() bool {
	if x != nil {
		return x.ExcludeShards
	}
	return false
}

func (x *BlockStreamFilter) GetFilterShards() []uint64 {
	if x != nil {
		return x.FilterShards
	}
	return nil
}

type BlockStreamSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter  *BlockStreamFilter           `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Content *BlockMessageContentSettings `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *BlockStreamSettings) Reset() {
	*x = BlockStreamSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocksapi_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStreamSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStreamSettings) ProtoMessage() {}

func (x *BlockStreamSettings) ProtoReflect() protoreflect.Message {
	mi := &file_blocksapi_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStreamSettings.ProtoReflect.Descriptor instead.
func (*BlockStreamSettings) Descriptor() ([]byte, []int) {
	return file_blocksapi_stream_proto_rawDescGZIP(), []int{1}
}

func (x *BlockStreamSettings) GetFilter() *BlockStreamFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *BlockStreamSettings) GetContent() *BlockMessageContentSettings {
	if x != nil {
		return x.Content
	}
	return nil
}

type BlockStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName    string                   `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	StartPolicy   BlockStreamStartPolicy   `protobuf:"varint,2,opt,name=start_policy,json=startPolicy,proto3,enum=BlockStreamStartPolicy" json:"start_policy,omitempty"`
	StartTarget   *BlockMessageID          `protobuf:"bytes,3,opt,name=start_target,json=startTarget,proto3,oneof" json:"start_target,omitempty"`
	StopPolicy    BlockStreamStopPolicy    `protobuf:"varint,4,opt,name=stop_policy,json=stopPolicy,proto3,enum=BlockStreamStopPolicy" json:"stop_policy,omitempty"`
	StopTarget    *BlockMessageID          `protobuf:"bytes,5,opt,name=stop_target,json=stopTarget,proto3,oneof" json:"stop_target,omitempty"`
	Settings      *BlockStreamSettings     `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	CatchupPolicy BlockStreamCatchUpPolicy `protobuf:"varint,7,opt,name=catchup_policy,json=catchupPolicy,proto3,enum=BlockStreamCatchUpPolicy" json:"catchup_policy,omitempty"`
	// If not provided - default settings are used during catchup
	CatchupSettings *BlockStreamSettings `protobuf:"bytes,8,opt,name=catchup_settings,json=catchupSettings,proto3,oneof" json:"catchup_settings,omitempty"`
}

func (x *BlockStreamRequest) Reset() {
	*x = BlockStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocksapi_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStreamRequest) ProtoMessage() {}

func (x *BlockStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocksapi_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStreamRequest.ProtoReflect.Descriptor instead.
func (*BlockStreamRequest) Descriptor() ([]byte, []int) {
	return file_blocksapi_stream_proto_rawDescGZIP(), []int{2}
}

func (x *BlockStreamRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *BlockStreamRequest) GetStartPolicy() BlockStreamStartPolicy {
	if x != nil {
		return x.StartPolicy
	}
	return BlockStreamStartPolicy_START_ON_EARLIEST_AVAILABLE
}

func (x *BlockStreamRequest) GetStartTarget() *BlockMessageID {
	if x != nil {
		return x.StartTarget
	}
	return nil
}

func (x *BlockStreamRequest) GetStopPolicy() BlockStreamStopPolicy {
	if x != nil {
		return x.StopPolicy
	}
	return BlockStreamStopPolicy_STOP_NEVER
}

func (x *BlockStreamRequest) GetStopTarget() *BlockMessageID {
	if x != nil {
		return x.StopTarget
	}
	return nil
}

func (x *BlockStreamRequest) GetSettings() *BlockStreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *BlockStreamRequest) GetCatchupPolicy() BlockStreamCatchUpPolicy {
	if x != nil {
		return x.CatchupPolicy
	}
	return BlockStreamCatchUpPolicy_CATCH_UP_PANIC
}

func (x *BlockStreamRequest) GetCatchupSettings() *BlockStreamSettings {
	if x != nil {
		return x.CatchupSettings
	}
	return nil
}

type BlockStreamEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *BlockStreamEnd) Reset() {
	*x = BlockStreamEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocksapi_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStreamEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStreamEnd) ProtoMessage() {}

func (x *BlockStreamEnd) ProtoReflect() protoreflect.Message {
	mi := &file_blocksapi_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStreamEnd.ProtoReflect.Descriptor instead.
func (*BlockStreamEnd) Descriptor() ([]byte, []int) {
	return file_blocksapi_stream_proto_rawDescGZIP(), []int{3}
}

func (x *BlockStreamEnd) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type BlockStreamError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorClass  BlockStreamErrorClass `protobuf:"varint,1,opt,name=error_class,json=errorClass,proto3,enum=BlockStreamErrorClass" json:"error_class,omitempty"`
	Description string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *BlockStreamError) Reset() {
	*x = BlockStreamError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocksapi_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStreamError) ProtoMessage() {}

func (x *BlockStreamError) ProtoReflect() protoreflect.Message {
	mi := &file_blocksapi_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStreamError.ProtoReflect.Descriptor instead.
func (*BlockStreamError) Descriptor() ([]byte, []int) {
	return file_blocksapi_stream_proto_rawDescGZIP(), []int{4}
}

func (x *BlockStreamError) GetErrorClass() BlockStreamErrorClass {
	if x != nil {
		return x.ErrorClass
	}
	return BlockStreamErrorClass_STREAM_ERROR_UNKNOWN
}

func (x *BlockStreamError) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type BlockStreamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message           *BlockMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	CatchupInProgress bool          `protobuf:"varint,2,opt,name=catchup_in_progress,json=catchupInProgress,proto3" json:"catchup_in_progress,omitempty"` // TODO: maybe add auxiliary info that helps understanding distance to latest block
}

func (x *BlockStreamMessage) Reset() {
	*x = BlockStreamMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocksapi_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStreamMessage) ProtoMessage() {}

func (x *BlockStreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_blocksapi_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStreamMessage.ProtoReflect.Descriptor instead.
func (*BlockStreamMessage) Descriptor() ([]byte, []int) {
	return file_blocksapi_stream_proto_rawDescGZIP(), []int{5}
}

func (x *BlockStreamMessage) GetMessage() *BlockMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *BlockStreamMessage) GetCatchupInProgress() bool {
	if x != nil {
		return x.CatchupInProgress
	}
	return false
}

type BlockStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*BlockStreamResponse_Message
	//	*BlockStreamResponse_StreamEnd
	//	*BlockStreamResponse_Error
	Response isBlockStreamResponse_Response `protobuf_oneof:"response"`
}

func (x *BlockStreamResponse) Reset() {
	*x = BlockStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocksapi_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStreamResponse) ProtoMessage() {}

func (x *BlockStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocksapi_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStreamResponse.ProtoReflect.Descriptor instead.
func (*BlockStreamResponse) Descriptor() ([]byte, []int) {
	return file_blocksapi_stream_proto_rawDescGZIP(), []int{6}
}

func (m *BlockStreamResponse) GetResponse() isBlockStreamResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *BlockStreamResponse) GetMessage() *BlockStreamMessage {
	if x, ok := x.GetResponse().(*BlockStreamResponse_Message); ok {
		return x.Message
	}
	return nil
}

func (x *BlockStreamResponse) GetStreamEnd() *BlockStreamEnd {
	if x, ok := x.GetResponse().(*BlockStreamResponse_StreamEnd); ok {
		return x.StreamEnd
	}
	return nil
}

func (x *BlockStreamResponse) GetError() *BlockStreamError {
	if x, ok := x.GetResponse().(*BlockStreamResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isBlockStreamResponse_Response interface {
	isBlockStreamResponse_Response()
}

type BlockStreamResponse_Message struct {
	Message *BlockStreamMessage `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type BlockStreamResponse_StreamEnd struct {
	StreamEnd *BlockStreamEnd `protobuf:"bytes,2,opt,name=stream_end,json=streamEnd,proto3,oneof"`
}

type BlockStreamResponse_Error struct {
	Error *BlockStreamError `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*BlockStreamResponse_Message) isBlockStreamResponse_Response() {}

func (*BlockStreamResponse_StreamEnd) isBlockStreamResponse_Response() {}

func (*BlockStreamResponse_Error) isBlockStreamResponse_Response() {}

var File_blocksapi_stream_proto protoreflect.FileDescriptor

var file_blocksapi_stream_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5f, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x22, 0x79, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x04,
	0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x6f,
	0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f,
	0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0e,
	0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x44,
	0x0a, 0x10, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x02,
	0x52, 0x0f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75,
	0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x32, 0x0a, 0x0e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d,
	0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a,
	0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x75, 0x70, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xaf, 0x01, 0x0a,
	0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xd9,
	0x01, 0x0a, 0x16, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x49, 0x45, 0x53, 0x54, 0x5f, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x45, 0x58, 0x41, 0x43, 0x54, 0x4c, 0x59, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x4f, 0x4e, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x49, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x05, 0x2a, 0x56, 0x0a, 0x18, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x55, 0x50, 0x5f, 0x50, 0x41, 0x4e, 0x49, 0x43, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x55, 0x50, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x10, 0x02, 0x2a, 0x56, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52,
	0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x02, 0x2a, 0x72, 0x0a, 0x15, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41,
	0x54, 0x43, 0x48, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x42, 0x46,
	0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x72,
	0x6f, 0x72, 0x61, 0x2d, 0x69, 0x73, 0x2d, 0x6e, 0x65, 0x61, 0x72, 0x2f, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x67, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x3b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blocksapi_stream_proto_rawDescOnce sync.Once
	file_blocksapi_stream_proto_rawDescData = file_blocksapi_stream_proto_rawDesc
)

func file_blocksapi_stream_proto_rawDescGZIP() []byte {
	file_blocksapi_stream_proto_rawDescOnce.Do(func() {
		file_blocksapi_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_blocksapi_stream_proto_rawDescData)
	})
	return file_blocksapi_stream_proto_rawDescData
}

var file_blocksapi_stream_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_blocksapi_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_blocksapi_stream_proto_goTypes = []interface{}{
	(BlockStreamStartPolicy)(0),         // 0: BlockStreamStartPolicy
	(BlockStreamCatchUpPolicy)(0),       // 1: BlockStreamCatchUpPolicy
	(BlockStreamStopPolicy)(0),          // 2: BlockStreamStopPolicy
	(BlockStreamErrorClass)(0),          // 3: BlockStreamErrorClass
	(*BlockStreamFilter)(nil),           // 4: BlockStreamFilter
	(*BlockStreamSettings)(nil),         // 5: BlockStreamSettings
	(*BlockStreamRequest)(nil),          // 6: BlockStreamRequest
	(*BlockStreamEnd)(nil),              // 7: BlockStreamEnd
	(*BlockStreamError)(nil),            // 8: BlockStreamError
	(*BlockStreamMessage)(nil),          // 9: BlockStreamMessage
	(*BlockStreamResponse)(nil),         // 10: BlockStreamResponse
	(*BlockMessageContentSettings)(nil), // 11: BlockMessageContentSettings
	(*BlockMessageID)(nil),              // 12: BlockMessageID
	(*BlockMessage)(nil),                // 13: BlockMessage
}
var file_blocksapi_stream_proto_depIdxs = []int32{
	4,  // 0: BlockStreamSettings.filter:type_name -> BlockStreamFilter
	11, // 1: BlockStreamSettings.content:type_name -> BlockMessageContentSettings
	0,  // 2: BlockStreamRequest.start_policy:type_name -> BlockStreamStartPolicy
	12, // 3: BlockStreamRequest.start_target:type_name -> BlockMessageID
	2,  // 4: BlockStreamRequest.stop_policy:type_name -> BlockStreamStopPolicy
	12, // 5: BlockStreamRequest.stop_target:type_name -> BlockMessageID
	5,  // 6: BlockStreamRequest.settings:type_name -> BlockStreamSettings
	1,  // 7: BlockStreamRequest.catchup_policy:type_name -> BlockStreamCatchUpPolicy
	5,  // 8: BlockStreamRequest.catchup_settings:type_name -> BlockStreamSettings
	3,  // 9: BlockStreamError.error_class:type_name -> BlockStreamErrorClass
	13, // 10: BlockStreamMessage.message:type_name -> BlockMessage
	9,  // 11: BlockStreamResponse.message:type_name -> BlockStreamMessage
	7,  // 12: BlockStreamResponse.stream_end:type_name -> BlockStreamEnd
	8,  // 13: BlockStreamResponse.error:type_name -> BlockStreamError
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_blocksapi_stream_proto_init() }
func file_blocksapi_stream_proto_init() {
	if File_blocksapi_stream_proto != nil {
		return
	}
	file_blocksapi_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_blocksapi_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStreamFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocksapi_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStreamSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocksapi_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocksapi_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStreamEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocksapi_stream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStreamError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocksapi_stream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStreamMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocksapi_stream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blocksapi_stream_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_blocksapi_stream_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*BlockStreamResponse_Message)(nil),
		(*BlockStreamResponse_StreamEnd)(nil),
		(*BlockStreamResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blocksapi_stream_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blocksapi_stream_proto_goTypes,
		DependencyIndexes: file_blocksapi_stream_proto_depIdxs,
		EnumInfos:         file_blocksapi_stream_proto_enumTypes,
		MessageInfos:      file_blocksapi_stream_proto_msgTypes,
	}.Build()
	File_blocksapi_stream_proto = out.File
	file_blocksapi_stream_proto_rawDesc = nil
	file_blocksapi_stream_proto_goTypes = nil
	file_blocksapi_stream_proto_depIdxs = nil
}
